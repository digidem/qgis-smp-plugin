# -*- coding: utf-8 -*-

"""
/***************************************************************************
 ComapeoMapBuilder
                                 A QGIS plugin
 Generates SMP files for CoMapeo
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-05-01
        copyright            : (C) 2025 by Awana Digital
        email                : luandro@awana.digital
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Awana Digital'
__date__ = '2025-05-01'
__copyright__ = '(C) 2025 by Awana Digital'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessingAlgorithm,
                       QgsProcessingParameterExtent,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterFileDestination,
                       QgsRectangle,
                       QgsProject,
                       QgsMapSettings,
                       QgsMapRendererCustomPainterJob)

from .comapeo_smp_generator import SMPGenerator


class ComapeoMapBuilderAlgorithm(QgsProcessingAlgorithm):
    """
    This algorithm generates SMP files for CoMapeo.

    It takes a vector layer as input and allows you to specify:
    - The extent of the area to export
    - The minimum zoom level
    - The maximum zoom level

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    EXTENT = 'EXTENT'
    MIN_ZOOM = 'MIN_ZOOM'
    MAX_ZOOM = 'MAX_ZOOM'
    OUTPUT_FILE = 'OUTPUT_FILE'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # Add extent parameter
        self.addParameter(
            QgsProcessingParameterExtent(
                self.EXTENT,
                self.tr('Extent'),
                optional=False
            )
        )

        # Add min zoom parameter
        self.addParameter(
            QgsProcessingParameterNumber(
                self.MIN_ZOOM,
                self.tr('Minimum zoom level'),
                QgsProcessingParameterNumber.Integer,
                defaultValue=0,
                optional=False,
                minValue=0,
                maxValue=24
            )
        )

        # Add max zoom parameter
        self.addParameter(
            QgsProcessingParameterNumber(
                self.MAX_ZOOM,
                self.tr('Maximum zoom level'),
                QgsProcessingParameterNumber.Integer,
                defaultValue=14,
                optional=False,
                minValue=0,
                maxValue=24
            )
        )

        # Add output file parameter
        self.addParameter(
            QgsProcessingParameterFileDestination(
                self.OUTPUT_FILE,
                self.tr('Output SMP file'),
                fileFilter='SMP files (*.smp)'
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Get the extent parameter
        extent = self.parameterAsExtent(parameters, self.EXTENT, context)

        # Get the min and max zoom parameters
        min_zoom = self.parameterAsInt(parameters, self.MIN_ZOOM, context)
        max_zoom = self.parameterAsInt(parameters, self.MAX_ZOOM, context)

        # Get the output file path
        output_file = self.parameterAsFileOutput(parameters, self.OUTPUT_FILE, context)

        # Log the parameters for debugging
        feedback.pushInfo(f'Using all visible layers from the current map canvas')
        feedback.pushInfo(f'Extent: {extent.asWktPolygon()}')
        feedback.pushInfo(f'Min zoom: {min_zoom}')
        feedback.pushInfo(f'Max zoom: {max_zoom}')
        feedback.pushInfo(f'Output file: {output_file}')

        # Create a rectangle from the extent
        rect = QgsRectangle(
            extent.xMinimum(),
            extent.yMinimum(),
            extent.xMaximum(),
            extent.yMaximum()
        )

        # Generate the SMP file
        generator = SMPGenerator(feedback)
        output_path = generator.generate_smp_from_canvas(rect, min_zoom, max_zoom, output_file)

        # Return the results
        return {self.OUTPUT_FILE: output_path}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'generatesmp'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr('Generate SMP Map')

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'smp'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return ComapeoMapBuilderAlgorithm()
